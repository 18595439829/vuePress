(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{402:function(n,e,t){"use strict";t.r(e);var o=t(44),r=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"openlayer绘制点-线-面-overlay-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#openlayer绘制点-线-面-overlay-vue"}},[n._v("#")]),n._v(" openlayer绘制点,线,面,overlay(vue)")]),n._v(" "),t("p",[n._v("demo可直接使用")]),n._v(" "),t("h2",{attrs:{id:"tilelayer-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tilelayer-html"}},[n._v("#")]),n._v(" TileLayer.html")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<template>\n  <div>\n    <div id="map" :class="$style[\'map\']"></div>\n    <Button @click="addPoint">添加点</Button>\n    <Button @click="removePoint">移除点</Button>\n    <Button @click="addLine">添加线</Button>\n    <Button @click="removeLine">移除线</Button>\n    <Button @click="addPolygon">添加面</Button>\n    <Button @click="removePolygon">移除面</Button>\n    <Button @click="addOverlay">添加Overlay</Button>\n    <Button @click="removeOverlay">移除Overlay</Button>\n  </div>\n</template>\n<script>\nimport Map from "./js/add-feature.js";\n\nexport default {\n  name: "TileLayer",\n  data() {\n    return {\n      map: null,\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      this.map = new Map();\n    },\n    addPoint() {\n      let point = [120, 30];\n      this.map.addPoint(point);\n    },\n    removePoint() {\n      this.map.clearPoint();\n    },\n    addLine() {\n      let line = [\n        [120, 30],\n        [121, 31],\n      ];\n      this.map.addLine(line);\n    },\n    removeLine() {\n      this.map.clearLine();\n    },\n    addPolygon() {\n      let polygon = [\n        [\n          [120, 30],\n          [120, 31],\n          [121, 31],\n          [121, 30],\n          [120, 30],\n        ],\n      ];\n      this.map.addPolygon(polygon);\n    },\n    removePolygon() {\n      this.map.clearPolygon();\n    },\n    addOverlay() {\n      let coord = [120,30];\n      this.map.addOverlay(coord)\n    },\n    removeOverlay() {\n      this.map.clearOverlay()\n    }\n  },\n};\n<\/script>\n\n<style lang="less" module>\n.map {\n  width: 100%;\n  height: 500px;\n}\n</style>\n\n')])])]),t("h2",{attrs:{id:"add-feature-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-feature-js"}},[n._v("#")]),n._v(" add-feature.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import Vue from "vue";\nimport "ol/ol.css";\nimport Map from "ol/Map";\nimport View from "ol/View";\nimport Feature from "ol/Feature.js";\nimport Overlay from "ol/Overlay.js";\nimport { Style, Circle, Fill, Stroke } from "ol/style";\nimport { fromLonLat } from "ol/proj.js";\nimport { Tile as TileLayer, Vector as VectorLayer } from "ol/layer";\nimport { OSM, Vector as VectorSource } from "ol/source";\nimport { LineString, Point, Polygon } from "ol/geom";\n\nexport default class MAP {\n  constructor() {\n    // 底图图层\n    const raster = new TileLayer({\n      source: new OSM(),\n    });\n    this.feature = null;\n    this.source = new VectorSource({ wrapX: true });\n    // 放置feature的图层\n    const layer = new VectorLayer({\n      source: this.source,\n    });\n    this.map = new Map({\n      layers: [raster, layer],\n      target: "map",\n      view: new View({\n        center: fromLonLat([120.32714457090765, 30.30569628128095]),\n        zoom: 11,\n      }),\n    });\n  }\n\n  addPoint(item) {\n    // item = [120,30]\n    this.clearPoint();\n    this.point = new Feature({\n      geometry: new Point(fromLonLat(item)),\n      type: "point",\n    });\n    let style = [\n      new Style({\n        image: new Circle({\n          // 填充\n          fill: new Fill({\n            color: "blue",\n          }),\n          // 描边\n          stroke: new Stroke({\n            color: "red",\n            width: 1,\n          }),\n          radius: 5,\n        }),\n        zIndex: 10,\n      }),\n    ];\n    this.point.setStyle(style);\n    this.source.addFeature(this.point);\n    this.panTo(this.point);\n  }\n  clearPoint() {\n    if (this.point) {\n      this.source.removeFeature(this.point);\n      this.point = null;\n    }\n  }\n  addLine(item) {\n    //item = [[120,30],[121,31]]\n    this.clearLine();\n    this.line = new Feature({\n      geometry: new LineString(\n        item.map((cood) => {\n          return fromLonLat(cood);\n        })\n      ),\n      type: "line",\n    });\n    let style = [\n      new Style({\n        fill: new Fill({\n          color: "blue",\n        }),\n        // 描边\n        stroke: new Stroke({\n          color: "red",\n          width: 5,\n        }),\n        zIndex: 10,\n      }),\n    ];\n    this.line.setStyle(style);\n    this.source.addFeature(this.line);\n    this.panTo(this.line);\n  }\n  clearLine() {\n    if (this.line) {\n      this.source.removeFeature(this.line);\n      this.line = null;\n    }\n  }\n  addPolygon(item) {\n    // item = [\n    //   [[120,30],[120,31],[121,31],[120,31],[120,30]]\n    // ]\n    this.clearPolygon();\n    let coords = item.map((cood) => {\n      return cood.map((coord) => {\n        return fromLonLat(coord);\n      });\n    });\n    this.polygon = new Feature({\n      geometry: new Polygon(coords),\n      type: "polygon",\n    });\n    let style = [\n      new Style({\n        fill: new Fill({\n          color: "blue",\n        }),\n        // 描边\n        stroke: new Stroke({\n          color: "red",\n          width: 1,\n        }),\n        image: new Circle({\n          radius: 7,\n          fill: new Fill({\n            color: "red",\n          }),\n        }),\n        zIndex: 10,\n      }),\n    ];\n    this.polygon.setStyle(style);\n    this.source.addFeature(this.polygon);\n    this.panTo(this.polygon);\n  }\n  clearPolygon() {\n    if (this.polygon) {\n      this.source.removeFeature(this.polygon);\n      this.polygon = null;\n    }\n  }\n  addOverlay(coord) {\n    // coord = [120,30]\n    this.clearOverlay();\n    let MyComponent = Vue.component("my-component", {\n      template: `<div>\n        <img style="width: 100px;height: 100px;" src=\'https://upload.jianshu.io/users/upload_avatars/13491706/5f94e7d8-78bd-4410-9ecc-21363fbb6148?imageMogr2/auto-orient/strip|imageView2/1/w/120/h/120\' />\n      </div>`,\n    });\n    const ComponentCtor = Vue.extend(MyComponent);\n    this.instance = new ComponentCtor();\n    this.instance.$mount();\n    this.overlay = new Overlay({\n      positioning: "bottom-center",\n      element: this.instance.$el,\n      insertFirst: true,\n      autoPan: false,\n      offset: [0, -10],\n    });\n    this.map.addOverlay(this.overlay);\n    this.overlay.setPosition(fromLonLat(coord));\n    this.zoomtoCenter(fromLonLat(coord));\n  }\n  clearOverlay() {\n    if (this.instance) {\n      this.instance.$destroy();\n    }\n    if (this.overlay) {\n      this.map.removeOverlay(this.overlay);\n      this.overlay = null;\n    }\n  }\n  panTo(feature, maxZoom = 17) {\n    const view = this.map.getView();\n    view.fit(feature.getGeometry(), {\n      padding: [0, 0, 0, 0],\n      maxZoom,\n    });\n  }\n  zoomtoCenter(coord, zoom = 18) {\n    const view = this.map.getView();\n    view.setZoom(zoom);\n    view.setCenter(coord);\n  }\n}\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);