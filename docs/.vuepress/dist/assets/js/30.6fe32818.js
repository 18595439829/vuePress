(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{385:function(e,t,a){"use strict";a.r(t);var r=a(44),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"moveable组件学习笔记一-drag拖拽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moveable组件学习笔记一-drag拖拽"}},[e._v("#")]),e._v(" moveable组件学习笔记一: drag拖拽")]),e._v(" "),a("h2",{attrs:{id:"一-准备阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-准备阶段"}},[e._v("#")]),e._v(" 一. 准备阶段")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("moveable支持拖拽(drag),更改大小(resize),缩放(scale),旋转(rotate)等功能")])])]),e._v(" "),a("h3",{attrs:{id:"_1-github文档地址-https-github-com-daybrush-moveable-6-2k个星"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-github文档地址-https-github-com-daybrush-moveable-6-2k个星"}},[e._v("#")]),e._v(" 1.github文档地址(https://github.com/daybrush/moveable) 6.2k个星")]),e._v(" "),a("h3",{attrs:{id:"_2-demo地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-demo地址"}},[e._v("#")]),e._v(" 2.demo地址")]),e._v(" "),a("p",[e._v("原插件demo https://daybrush.com/moveable/\nvue-moveable的demo https://alis.oss.aliyuncs.com/page/moveble/#/")]),e._v(" "),a("h2",{attrs:{id:"二-文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-文档"}},[e._v("#")]),e._v(" 二.文档")]),e._v(" "),a("h3",{attrs:{id:"_1-初始化一个moveable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化一个moveable"}},[e._v("#")]),e._v(" 1.初始化一个moveable")]),e._v(" "),a("p",[e._v("通过new Moveable(parentElement, options),options都支持先初始化一个实例,后续直接使用"),a("code",[e._v(".属性名")]),e._v("的方式设置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import Moveable from \"moveable\";\n\nthis.moveable = new Moveable(\n        this.$refs.container, // moveable元素的父元素\n        {\n          className: 'draggable', // 可交互组件的class名称\n          target: this.$refs.example, // 响应moveable操作结果的元素,如包裹一个可拖拽图钉的方块\n          origin: false, // moveable元素的中心点是否可见,default: true\n          edge: true, // resize,scale是否支持通过边框操作\n          padding: { left: 0, top: 0, right: 0, bottom: 0 }, // target元素周围增加padding,不会改变target样式,只是将moveable选框撑开, default: null\n          passDragArea: false, // default: false, [**没有发现实际作用**]\n          zoom: 1, // moeable组件的元素缩放比例,default: 1,即边框或者四角和边框的句柄等\n          draggable: true, // 是否支持可拖拽\n          dragTarget, this.$refs.drag, // 执行moveable操作的元素,如可拖拽的图钉\n          resizable: true, // 是否支持更改大小\n          scalable: true, // 是否支持缩放\n          rotatable: true, // 是否支持旋转\n          warpable: true,  // 是否支持折叠,3d效果,增加Z轴\n          throttleDrag: 0,\n          throttleResize: 0,0\n        }\n      );\nthis.moveable.scalable = false\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("moveable实例为需要执行moveable操作的moveable对象,包括拖拽句柄或者边框等;")]),e._v(" "),a("strong",[e._v("target: 则为响应moveable操作结果的dom元素,即我们真实想要变更的dom")])])]),e._v(" "),a("h3",{attrs:{id:"_2-draggable-拖拽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-draggable-拖拽"}},[e._v("#")]),e._v(" 2.draggable 拖拽")]),e._v(" "),a("p",[e._v("https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html")]),e._v(" "),a("h4",{attrs:{id:"_2-1-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-属性"}},[e._v("#")]),e._v(" 2.1 属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("this.moveable = new Moveable(\n  this.$refs.container, // moveable元素的父元素\n  {\n      className: 'draggable', // 可交互组件的class名称\n      target: this.$refs.example, // 响应moveable操作结果的元素\n      origin: false, // moveable元素的中心点是否可见,default: true\n      /**拖拽属性 */\n      draggable: true, // 是否支持可拖拽,default: false\n      edgeDraggable: true, // 是否支持拖拽边框移动, default: false\n      startDragRotate: 45, // 拖拽起始位置的角度(deg): default: 0\n      throttleDragRotate: 90, // 拖拽角度的分割单位(deg): 拖拽角度角度可固定,default: 0,则为可以360deg拖动, 90则是以元素中心点固定为四个可拖拽方向 90deg 180deg 270deg 360deg\n     throttleDrag: 100, // 拖拽时节流的单位(px),即每次拖拽最小拖动单位为100px,\n  }\n);\n")])])]),a("blockquote",[a("p",[e._v("throttleDrag属性与startDragRotate和throttleDragRotate属性互斥,同时存在,则只有startDragRotate和throttleDragRotate属性生效,throttleDrag优先级更低")])]),e._v(" "),a("h4",{attrs:{id:"_2-2-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-事件"}},[e._v("#")]),e._v(" 2.2 事件")]),e._v(" "),a("p",[e._v("drag事件有"),a("strong",[e._v("dragStart")]),e._v(","),a("strong",[e._v("drag")]),e._v(","),a("strong",[e._v("dragEnd")]),e._v("三种,通过moveable实例的on方法添加监听事件,返回值event")]),e._v(" "),a("ul",[a("li",[e._v("drag")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('this.moveable\n  .on(\n    "drag",\n    ({\n      currentTarget, // moveable实例,即this.moveable\n      moveable, // moveable的manager对象, const manager = this.moveable.getManager();\n      target, // DOM 初始化moveable的target元素\n      clientX, // number 鼠标所在屏幕的横坐标\n      clientY, // number 鼠标实例所在屏幕的纵坐标\n      datas,\n      inputEvent, // Event 鼠标事件mousemove\n      beforeDelta, //  [left, top] 相较于上一次,拖拽的delta值\n      beforeDist, // [left, top] 相较于上一次,拖拽的数据\n      beforeTranslate, // [left, top] 元素相较于起始位置的平移数据\n      delta, //  [left, top] 相较于上一次,拖拽的delta值\n      dist, // [left, top] 相较于上一次,拖拽的数据\n      translate, // [left, top] 元素相较于起始位置的平移数据\n      transform, // string 元素的transform css属性值\n      left, // number 相较于上一次拖拽数据,当前元素的left属性的变化值\n      top, // number 相较于上一次拖拽数据,当前元素的top属性的变化值\n      bottom, // number 相较于上一次拖拽数据,当前元素的bottom属性的变化值\n      right, // number 相较于上一次拖拽数据,当前元素的right属性的变化值\n      width, // number 可拖拽元素(target)的宽度\n      height, // number 可拖拽元素(target)的高度\n      isPinch, // 元素是否被压缩,不包括resize,scale所引起的形变[**暂未证实具体作用**]\n    }) => {\n      target.style.transform = `translate(${beforeTranslate[0]}px, ${beforeTranslate[1]}px)`;\n    }\n  )\n')])])]),a("ul",[a("li",[e._v("dragStart")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('this.moveable\n  .on(\n    "dragStart",\n    ({\n      setTransform, // (transform: string | string[], index?: number) => void 设置target初始的transform属性, setTransform与set同时仅可使用一个\n      setTransformIndex, // (transformIndex: number) => void  [**暂未证实具体作用**]\n      set, // 设置初始的translate属性\n      currentTarget,\n      moveable,\n      target,\n      clientX,\n      clientY,\n      datas,\n      inputEvent,\n    }) => {\n      // setTransform("translate(100px, 100px)");\n      // set([100, 100])\n    }\n  )\n')])])]),a("ul",[a("li",[e._v("dragEnd")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('this.moveable\n    .on(\n          "dragEnd",\n          ({\n            lastEvent, // 最后一个拖动的事件,如果moveable实例未被拖动,则为undefined\n            isDrag,  // boolean moveable实例是否被拖动了\n            isDouble,  // boolean moveable实例是否被双击\n            currentTarget,\n            moveable,\n            target,\n            clientX,\n            clientY,\n            datas,\n            inputEvent,\n          }) => {\n            console.log(lastEvent,\n            isDrag, \n            isDouble,)\n          }\n        )\n')])])]),a("h4",{attrs:{id:"_2-3-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-方法"}},[e._v("#")]),e._v(" 2.3 方法")]),e._v(" "),a("ul",[a("li",[e._v("request({x, y, deltaX, deltaY})\nx,y // number, 是元素相对于window的绝对位置(单位:px)\ndeltaX, deltaY // number, 是元素相对于父级容器的相对位置(单位:px)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('dragRequest() {\n      const requester = this.moveable.request("draggable");\n      requester.request({ deltaX: 10, deltaY: 10 });\n      requester.requestEnd();\n    },\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);